///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			> ASYNCHRONOUS JAVASCRIPT
							
	· Most code is SYNCHRONOUS -> EXECUTED LINE BY LINE AS IT APPEARS IN THE CODE(SEQUENCE).
		This generates a block in the execution if a lines takes too much to execute.
	
	! Asynchoronous code > CODE IS EXECUTED AFTER A TASK THAT RUNS IN THE "BACKGROUND" FINISHES.
		-> Execution is NON-BLOCKING.
		Execution doesn't wait for an asynchronous task to finish it's work.
		
	Just certain functions work async (eg: timers).
	
	· Use cases: 	-> Timers
		     	-> Image loading
		     	-> API 
		     	-> AJAX calls (Probably most important use case)
		     	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			> AJAX : ASYNCHRONOUS JAVASCRIPT AND XML
					
	> Allows us to communicate with remote web servers in an asynchronous way.
	> With AJAX calls we can REQUEST DATA from web servers dynamically. (CRUD REQUESTS)
	
	· XML : DATA FORMAT THAT WAS WIDELY USED TO TRANSMIT DATA ON THE WEB.
		IS NOT USED ANYMORE.
	
	· JSON : MOST USED DATA FORMAT TODAY.
	
-> AJAX CALL : 
	> XML HTTP REQUEST function (MOST OLD SCHOOL METHOD OF DOING AJAX CALLS)
		Before, they were handled by events and callback functions.
		(Now with promises).
		
	<----!code sample ---->
	
const request = new XMLHttpRequest();
request.open('CRUD OPERATION OF REQUEST', 'LINK URL REQUEST');
request.send();
		> This is gonna wait in the backgroud as the data returns. (ASYNC)
		> We need a callback function to know when the data has finished arriving.-

request.addEventListener('load', callbackF);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			> CALLBACKS AND CALLBACK-HELL
											
	> To make an AJAX call depend on other (so the order in which each ends is set).
	> Before, all run in parallel and we have no way of knowing beforehand wich one will end first.
	
		> Now we have an AJAX CALL inside the first callback
			> If we need more request, this will end up in really nested callbacks (callback hell).
			
			
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 			> PROMISES (A WAY TO AVOID CALLBACK HELL) - ES6
 			  AND FETCH API (NEW WAY OF AJAX CALLING)
 	> FETCH API :
 		 · For basic ajax calls
 		 
 	const request = fetch('url');			-> That's it, at least to simple AJAX calls, the fetch api can receive a lot more parameters.
 		> It inmediately returns a promise stored in the variable.
 		
 	> PROMISE : 
 		· An object that is used as a placeholder for the future result of an asynchronous operation.
 			" A container for a future value".
 			
 		· Thanks to PROMISES we no longer rely on events and callbacks to handle asynchoronous results.
 		· We now can CHAIN PROMISES for a sequence of asynchronous operations (escape of callback hell).
 		
 		· PROMISES LIFECYCLE (STATES) : 
 			- PENDING : Before the value is available.
 	
 			- SETTLED:
 				> FULFILLED : Succesfully got the value.
 				> REJECTED : An error happened.
 			! A PROMISE IS ONLY SETTLED ONCE (IT REMAINS EITHER FULFILLED OR REJECTED).
 					
 	! WE ARE ABLE TO HANDLE THIS DIFFERENTS STATES IN OUR CODE.
 	
 	> CONSUME A PROMISE : When we already have a promise (Eg. Return from fetch API).
 							Or buil a promise, in order to consume it.
 							
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			> CONSUMING PROMISES 
> Consuming the promise returned from the FETCH function.
	 
· WE USE TE "THEN" METHOD (AVAILABLE FOR ALL PROMISES).
	> The THEN method receives a callback FUNCTION to use once the PROMISE is FULFILLED.
	> That callback function receives ONE argument that is the result value of the fulfilled 
	the promise(all request data, header+requested data).
	> On the response method we use the JSON method to actually read the data.
	> JSON method is available in al fetch responses, and is ASYNC so IT ALSO RETURNS A PROMISE
	  (We should use the then method again).
		
· CHAINING PROMISES:
	> FROM THE THEN METHOD WE RETURN ANOTHER FETCH (ANOTHER PROMISE) -> 
	SO WE CHAIN ANOTHER THEN METHOD.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			> HANDLING ERROR WITH PROMISES
	THE THEN METHOD ACCEPTS TWO PARAMETERS:
  · THE FIRST CALLBACK FUNCTION THAT WE'VE BEEN USING TO MANAGE THE REQUEST, WITH THE RESPONSE PARAMETER.
  · FETCH METHOD ONLY REJECTS WHEN THERE'S NO INTERNET CONECTION.
  · CAN ALSO ACCEPT A SECOND ONE THAT WORKS WHEN THERES AN UNFULFULLED PROMISE (ONLY FOR INTERNET DISCONECTION FOR NOW).
  · THE PARAMETER FOR THIS SECOND CALLBACK FUNCTION WILL BE THE ERROR PARAM. 

 !! THERE'S A BETTER WAY THAN ADDING A CALLBACK IN EACH THEN METHOD, IF WE HAVE DEEPLY NESTED FETCHES IT WON'T BE CLEAN.
 
 WE CAN ADD A <CATCH> METHOD AT THE END OF THE CHAIN, AND IT WILL HANDLE THE ERROR NO MATTER IN WHICH PART OF THE CHAIN IT OCCURS.
  · The catch method receives a callback function as a parameter (we can use the same fuction that we will have used in the then method). 
  
  
  > BESIDES THEN, AND CATCH, THERE'S ANOTHER METHOD: FINALLY.
  > THE FINALLY METHOD IS PLACED AT THE END OF THE CHAIN, AFTER ALL THEN , AND CATCH.
  > IS CALLBALCK FUNCTION INSIDE OF THE FINALLY METHOD WILL WE ALWAYS BE CALLED, NO MATTER THE STATUS OF THE PROMISE (FULLFILLED/REJECTED).
  > IT'S USEFUL TO ADD SPINERS ADDED WHILE LOADING/DOING ASYNC OPERATIOS. !!!!!!!!!!!!								<---- USEFUL
  
  
  · WE NEED A WAY TO MANAGE ANOTHER TYPE OF ERRORS OTHER THAT NO INTERNET CONECTION.
  
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			> THROWING ERRORS MANUALLY

  To throw user-understandable errors, that make the user understand the error better (Eg. 404 error - request not found).
!-> Fetch ONLY REJECTS WHEN THERES NO INTERNET.

	> WE CAN ADD THIS LOGIC IN THE RESPONSE BASED ON THE OK PROPERTY.
	 response.ok =  true, => status: 200,
	 
	> WE CAN ADD A LOGICAL OPERATOR, THAT WILL THROW AN ERROR IF THE RESPONSE.OK IS SET TO FALSE.
	
>> SYNTAX <<

if (!response.ok)
	throw new Error(error message);
	
>>>>>>THROWING AN ERROR INMEDIATELY TERMINATES THE FUNCTION (SAME AS RETURN) AND REJECTS THE PROMISE.
	AFTER THROWING AN ERROR THE STATUS OF THE PROMISE WILL BE REJECTED. The rejection will propagate till the catch method.
					
					
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////					
			> BUILDING A SIMPLE PROMISE
			
· new Promise(function(){})		-> Promise constructor - In JS Promises are a special kind of objects.
					-> They receibe exactly one parameter: A FUNCTION CALLED EXECUTOR.
					-> As soon as the promise resolves, it will run the executor function.
					-> The executor function receibes two parameteres. The "resolve" and "reject" functions.
					
  -> We add logic to the Promise, and as al promises, when resolved, must return a value.
  -> To set the promise as fullfilled, we use the first parameter function "resolve()".
  -> Whaterver we pass as a parameter of the "resolve" function will be the value returned by the fullfilled promise.
  -> To set the promise as rejected, we use the "reject" parameter function.
  
  -> Promise.resolve('value') -> Inmediately fullfilled promise.
  
  
